import React, {useContext} from 'react';
import Head from 'next/head';
import {useKonami} from 'react-konami-code';
import {ErrorBoundary} from '../components/error-boundary.js';
import {ArcadeHeader} from '/components/ArcadeHeader/index.js';
import {MegaverseGrid} from '/components/MegaverseGrid/index.js';
import {Toolbar} from '/components/Toolbar/index.js';
import {SecretToolBar} from '/components/SecretToolBar/index.js';
import {SecretCodeContext} from '/contexts/SecretCodeContext/index.js';

export default function Home() {
  const {getIsActive, setIsActive} = useContext(SecretCodeContext);

  const easterEgg = () => {
    setIsActive(true);
  };

  useKonami(easterEgg);

  return (
      <div className={ 'h-full' }>
        <Head>
          <title>ðŸŒŒ Megaverse Builder ðŸš€</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <ArcadeHeader />

        <div className="flex flex-col pt-[450px] text-dark-200 items-center justify-center ">
          <ErrorBoundary>

            <div className={ 'flex mt-12 -mb-12  flex-col lg:flex-row gap-24 items-center justify-center ' +
            (getIsActive() ? '' : 'lg:-ml-48') }>
              <Toolbar />

              <div className={ 'flex flex-col items-center justify-center ' }>
                <p className={ 'text-xl text-purple-200 mb-6 -mt-6 select-none' }>Choose a brush and start painting :D</p>
                {/* IDS are containers, the crt class holds the actual effect */ }
                <div id={ 'monitor' }>
                  <div id={ 'screen' } className={ 'crt-effect bg-gray-200' }>
                    <div id={ 'crt' }>
                      <MegaverseGrid />
                    </div>
                  </div>
                </div>
                <p className={ 'text-sm text-purple-300 opacity-70 select-none mt-6 -mb-6' }>
                  pspsps: super secret cheat-code hidden somewhere
                </p>
              </div>
              { getIsActive() ? (
                  <SecretToolBar />
              ) : null }
            </div>
          </ErrorBoundary>
        </div>
      </div>
  );
}
